/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RecommendImport } from './routes/recommend'
import { Route as FaqImport } from './routes/faq'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as MovieRecommendationsImport } from './routes/movie/recommendations'
import { Route as MovieImdbIdImport } from './routes/movie/$imdbId'

// Create/Update Routes

const RecommendRoute = RecommendImport.update({
  id: '/recommend',
  path: '/recommend',
  getParentRoute: () => rootRoute,
} as any)

const FaqRoute = FaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MovieRecommendationsRoute = MovieRecommendationsImport.update({
  id: '/movie/recommendations',
  path: '/movie/recommendations',
  getParentRoute: () => rootRoute,
} as any)

const MovieImdbIdRoute = MovieImdbIdImport.update({
  id: '/movie/$imdbId',
  path: '/movie/$imdbId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqImport
      parentRoute: typeof rootRoute
    }
    '/recommend': {
      id: '/recommend'
      path: '/recommend'
      fullPath: '/recommend'
      preLoaderRoute: typeof RecommendImport
      parentRoute: typeof rootRoute
    }
    '/movie/$imdbId': {
      id: '/movie/$imdbId'
      path: '/movie/$imdbId'
      fullPath: '/movie/$imdbId'
      preLoaderRoute: typeof MovieImdbIdImport
      parentRoute: typeof rootRoute
    }
    '/movie/recommendations': {
      id: '/movie/recommendations'
      path: '/movie/recommendations'
      fullPath: '/movie/recommendations'
      preLoaderRoute: typeof MovieRecommendationsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/faq': typeof FaqRoute
  '/recommend': typeof RecommendRoute
  '/movie/$imdbId': typeof MovieImdbIdRoute
  '/movie/recommendations': typeof MovieRecommendationsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/faq': typeof FaqRoute
  '/recommend': typeof RecommendRoute
  '/movie/$imdbId': typeof MovieImdbIdRoute
  '/movie/recommendations': typeof MovieRecommendationsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/faq': typeof FaqRoute
  '/recommend': typeof RecommendRoute
  '/movie/$imdbId': typeof MovieImdbIdRoute
  '/movie/recommendations': typeof MovieRecommendationsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/faq'
    | '/recommend'
    | '/movie/$imdbId'
    | '/movie/recommendations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/faq'
    | '/recommend'
    | '/movie/$imdbId'
    | '/movie/recommendations'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/faq'
    | '/recommend'
    | '/movie/$imdbId'
    | '/movie/recommendations'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  FaqRoute: typeof FaqRoute
  RecommendRoute: typeof RecommendRoute
  MovieImdbIdRoute: typeof MovieImdbIdRoute
  MovieRecommendationsRoute: typeof MovieRecommendationsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  FaqRoute: FaqRoute,
  RecommendRoute: RecommendRoute,
  MovieImdbIdRoute: MovieImdbIdRoute,
  MovieRecommendationsRoute: MovieRecommendationsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/faq",
        "/recommend",
        "/movie/$imdbId",
        "/movie/recommendations"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/faq": {
      "filePath": "faq.tsx"
    },
    "/recommend": {
      "filePath": "recommend.tsx"
    },
    "/movie/$imdbId": {
      "filePath": "movie/$imdbId.tsx"
    },
    "/movie/recommendations": {
      "filePath": "movie/recommendations.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
